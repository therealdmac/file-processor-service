name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: filedb
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        # wait for DB to be healthy before starting tests
        options: >-
          --health-cmd "pg_isready -U postgres -d filedb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #  Java setup for your backend
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      #  Cache Maven dependencies
      - name: Cache Maven local repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      #  Wait for Postgres before running tests
      - name: Wait for Postgres to be ready
        run: |
          for i in {1..15}; do
            if pg_isready -h localhost -U postgres -d filedb; then
              echo " Postgres is ready"
              break
            fi
            echo "‚è≥ Waiting for Postgres..."
            sleep 5
          done

      #  Build and test backend
      - name: Build & run tests
        working-directory: ./backend
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/filedb
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: postgres
        run: mvn -B clean test

      #  Package JAR
      - name: Package application
        working-directory: ./backend
        run: mvn -B package -DskipTests

      #  Build Docker image (backend)
      - name: Build backend Docker image
        working-directory: ./backend
        run: docker build -t file-processor-service:latest .

      #  Optionally: build frontend
      - name: Build frontend (Angular)
        working-directory: ./file-processor-ui
        run: |
          npm ci
          npm run build --if-present

      #  Optionally: ensure docker-compose builds
      - name: Test docker-compose build
        run: docker compose build
